$date
	Sun Dec 17 15:19:59 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var reg 1 ! Clk $end
$var reg 1 " Rst $end
$var reg 32 # cycles [31:0] $end
$var reg 32 $ i [31:0] $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 % XM_RegWrite $end
$var wire 5 & XM_RD [4:0] $end
$var wire 32 ' XM_ALUout [31:0] $end
$var wire 1 ( XF_Branch $end
$var wire 1 ) MW_RegWrite $end
$var wire 5 * MW_RD [4:0] $end
$var wire 32 + MW_ALUout [31:0] $end
$var wire 1 , Jump $end
$var wire 32 - JAddr [31:0] $end
$var wire 32 . FD_PC [31:0] $end
$var wire 32 / FD_IR [31:0] $end
$var wire 1 0 DX_RegWrite $end
$var wire 5 1 DX_RD [4:0] $end
$var wire 1 2 DX_Branch $end
$var wire 32 3 B [31:0] $end
$var wire 3 4 ALUctr [2:0] $end
$var wire 32 5 A [31:0] $end
$scope module EXE $end
$var wire 1 6 ALUop $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 0 DX_RegWrite $end
$var wire 5 7 DX_RD [4:0] $end
$var wire 1 2 DX_Branch $end
$var wire 32 8 B [31:0] $end
$var wire 3 9 ALUctr [2:0] $end
$var wire 32 : A [31:0] $end
$var reg 32 ; ALUout [31:0] $end
$var reg 1 ( XF_Branch $end
$var reg 5 < XM_RD [4:0] $end
$var reg 1 % XM_RegWrite $end
$upscope $end
$scope module ID $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 = PC [31:0] $end
$var wire 1 ) MW_RegWrite $end
$var wire 5 > MW_RD [4:0] $end
$var wire 32 ? MW_ALUout [31:0] $end
$var wire 32 @ IR [31:0] $end
$var reg 32 A A [31:0] $end
$var reg 3 B ALUctr [2:0] $end
$var reg 32 C B [31:0] $end
$var reg 1 2 Branch $end
$var reg 1 0 DX_RegWrite $end
$var reg 32 D JAddr [31:0] $end
$var reg 1 , Jump $end
$var reg 5 E RD [4:0] $end
$upscope $end
$scope module IF $end
$var wire 1 ( Branch $end
$var wire 32 F JAddr [31:0] $end
$var wire 1 , Jump $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 G IR [31:0] $end
$var reg 32 H PC [31:0] $end
$upscope $end
$scope module MEM $end
$var wire 32 I ALUout [31:0] $end
$var wire 5 J XM_RD [4:0] $end
$var wire 1 % XM_RegWrite $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 K MW_ALUout [31:0] $end
$var reg 5 L MW_RD [4:0] $end
$var reg 1 ) MW_RegWrite $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
bx F
b0 E
bx D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
z6
b0 5
b0 4
b0 3
x2
b0 1
x0
b0 /
b0 .
bx -
x,
b0 +
b0 *
0)
0(
b0 '
b0 &
0%
b100000 $
b0 #
1"
1!
$end
#10000
0!
#12000
0"
#20000
x%
x(
0,
10
b100 .
b100 =
b100 H
b1000000000000000000000001010 /
b1000000000000000000000001010 @
b1000000000000000000000001010 G
b1 #
1!
#30000
0!
#40000
b100000 /
b100000 @
b100000 G
b1000 .
b1000 =
b1000 H
02
b101000 -
b101000 D
b101000 F
1,
1%
x)
b10 #
1!
#50000
0!
#60000
0(
b10 4
b10 9
b10 B
0,
b101000 .
b101000 =
b101000 H
b11 #
1)
1!
#70000
0!
#80000
b1000100010100000100100 /
b1000100010100000100100 @
b1000100010100000100100 G
b101100 .
b101100 =
b101100 H
b100 #
1!
#90000
0!
#100000
b0 4
b0 9
b0 B
b101 1
b101 7
b101 E
b11001 3
b11001 8
b11001 C
b10010 5
b10010 :
b10010 A
b110000 .
b110000 =
b110000 H
b100000 /
b100000 @
b100000 G
b101 #
1!
#110000
0!
#120000
b110100 .
b110100 =
b110100 H
b0 5
b0 :
b0 A
b10 4
b10 9
b10 B
b0 1
b0 7
b0 E
b0 3
b0 8
b0 C
b101 &
b101 <
b101 J
b10000 '
b10000 ;
b10000 I
b110 #
1!
#130000
0!
#140000
b0 '
b0 ;
b0 I
b0 &
b0 <
b0 J
b111000 .
b111000 =
b111000 H
b111 #
b101 *
b101 >
b101 L
b10000 +
b10000 ?
b10000 K
1!
#150000
0!
#160000
b111100 .
b111100 =
b111100 H
b0 *
b0 >
b0 L
b0 +
b0 ?
b0 K
b1000 #
1!
#170000
0!
#180000
b1000000 .
b1000000 =
b1000000 H
b1000100011000000100101 /
b1000100011000000100101 @
b1000100011000000100101 G
b1001 #
1!
#190000
0!
#200000
b100000 /
b100000 @
b100000 G
b1000100 .
b1000100 =
b1000100 H
b10010 5
b10010 :
b10010 A
b1 4
b1 9
b1 B
b110 1
b110 7
b110 E
b11001 3
b11001 8
b11001 C
b1010 #
1!
#210000
0!
#220000
b11011 '
b11011 ;
b11011 I
b110 &
b110 <
b110 J
b10 4
b10 9
b10 B
b0 1
b0 7
b0 E
b0 3
b0 8
b0 C
b0 5
b0 :
b0 A
b1001000 .
b1001000 =
b1001000 H
b1011 #
1!
#230000
0!
#240000
b1001100 .
b1001100 =
b1001100 H
b0 &
b0 <
b0 J
b0 '
b0 ;
b0 I
b110 *
b110 >
b110 L
b11011 +
b11011 ?
b11011 K
b1100 #
1!
#250000
0!
#260000
b1010000 .
b1010000 =
b1010000 H
b1101 #
b0 *
b0 >
b0 L
b0 +
b0 ?
b0 K
1!
#270000
0!
#280000
b1000100011100000101010 /
b1000100011100000101010 @
b1000100011100000101010 G
b1010100 .
b1010100 =
b1010100 H
b1110 #
1!
#290000
0!
#300000
b111 4
b111 9
b111 B
b111 1
b111 7
b111 E
b11001 3
b11001 8
b11001 C
b10010 5
b10010 :
b10010 A
b1011000 .
b1011000 =
b1011000 H
b100000 /
b100000 @
b100000 G
b1111 #
1!
#310000
0!
#320000
b1011100 .
b1011100 =
b1011100 H
b0 5
b0 :
b0 A
b10 4
b10 9
b10 B
b0 1
b0 7
b0 E
b0 3
b0 8
b0 C
b111 &
b111 <
b111 J
b1 '
b1 ;
b1 I
b10000 #
1!
#330000
0!
#340000
b0 '
b0 ;
b0 I
b0 &
b0 <
b0 J
b1100000 .
b1100000 =
b1100000 H
b10001 #
b111 *
b111 >
b111 L
b1 +
b1 ?
b1 K
1!
#350000
0!
#360000
b1100100 .
b1100100 =
b1100100 H
b0 *
b0 >
b0 L
b0 +
b0 ?
b0 K
b10010 #
1!
#370000
0!
#380000
b1101000 .
b1101000 =
b1101000 H
b10011 #
1!
#390000
0!
#400000
b1101100 .
b1101100 =
b1101100 H
b10100 #
1!
#410000
0!
#420000
b1110000 .
b1110000 =
b1110000 H
b10101 #
1!
#430000
0!
#440000
b1110100 .
b1110100 =
b1110100 H
b10110 #
1!
#450000
0!
#460000
b1111000 .
b1111000 =
b1111000 H
b10111 #
1!
#470000
0!
#480000
bx /
bx @
bx G
b1111100 .
b1111100 =
b1111100 H
b11000 #
1!
#490000
0!
#500000
bx 5
bx :
bx A
b10000000 .
b10000000 =
b10000000 H
b11001 #
1!
#510000
0!
#520000
b10000100 .
b10000100 =
b10000100 H
bx '
bx ;
bx I
b11010 #
1!
#530000
0!
#540000
b10001000 .
b10001000 =
b10001000 H
b11011 #
bx +
bx ?
bx K
1!
#550000
0!
#560000
b10001100 .
b10001100 =
b10001100 H
b11100 #
1!
#570000
0!
#580000
b10010000 .
b10010000 =
b10010000 H
b11101 #
1!
#590000
0!
#600000
b10010100 .
b10010100 =
b10010100 H
b11110 #
1!
#610000
0!
#620000
b10011000 .
b10011000 =
b10011000 H
b11111 #
1!
